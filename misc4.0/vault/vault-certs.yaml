---
apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  name: self-signer
spec:
  selfSigned: {}
---
  # Generate a RootCA Certificate used to sign certificates for the webhook
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: rootca
spec:
  secretName: rootca
  issuerRef:
    name: self-signer
  commonName: "ca.self-signer.cert-manager"
  isCA: true
---
  # Create an Issuer that uses the above generated CA certificate to issue certs
apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  name: internal-issuer
spec:
  ca:
    secretName: rootca
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: seed-vault
spec:
  # Secret names are always required.
  secretName: seed-vault-tls
  commonName: seed-vault
  dnsNames:
  - seed-vault
  issuerRef:
    name: internal-issuer
    # We can reference ClusterIssuers by changing the kind here.
    # The default value is Issuer (i.e. a locally namespaced Issuer)
    kind: Issuer
    # This is optional since cert-manager will default to this value however
    # if you are using an external issuer, change this to that issuer group.
    group: cert-manager.io
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: vault
spec:
  # Secret names are always required.
  secretName: vault-tls
  commonName: vault
  usages:
    - server auth
    - client auth  
  dnsNames:
  - vault-0.vault-internal
  - vault-1.vault-internal
  - vault-2.vault-internal
  - vault
  - vault.vault.svc
  - vault.vault.svc.cluster.local
  issuerRef:
    name: internal-issuer
    # We can reference ClusterIssuers by changing the kind here.
    # The default value is Issuer (i.e. a locally namespaced Issuer)
    kind: Issuer
    # This is optional since cert-manager will default to this value however
    # if you are using an external issuer, change this to that issuer group.
    group: cert-manager.io      
