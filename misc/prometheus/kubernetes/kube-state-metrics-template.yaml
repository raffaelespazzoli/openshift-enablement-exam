apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: kube-state-metrics
  annotations:
    "openshift.io/display-name": kube-state-metrics
    iconClass: icon-cogs
    tags: "monitoring,prometheus,time-series"
parameters:
- description: The namespace to instantiate kube-state-metrics under. Defaults to 'kube-system'.
  name: NAMESPACE
  value: kube-system
objects:  
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRoleBinding
  metadata:
    name: kube-state-metrics
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: kube-state-metrics
  subjects:
  - kind: ServiceAccount
    name: kube-state-metrics
    namespace: ${NAMESPACE}
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRole
  metadata:
    name: kube-state-metrics
  rules:
  - apiGroups: [""]
    resources:
    - nodes
    - pods
    - services
    - resourcequotas
    - replicationcontrollers
    - limitranges
    - persistentvolumeclaims
    verbs: ["list", "watch"]
  - apiGroups: ["extensions"]
    resources:
    - daemonsets
    - deployments
    - replicasets
    verbs: ["list", "watch"]
  - apiGroups: ["apps"]
    resources:
    - statefulsets
    verbs: ["list", "watch"]
  - apiGroups: ["batch"]
    resources:
    - cronjobs
    - jobs
    verbs: ["list", "watch"]    
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    name: kube-state-metrics
    namespace: ${NAMESPACE}
  spec:
    replicas: 1
    template:
      metadata:
        labels:
          k8s-app: kube-state-metrics
      spec:
        serviceAccountName: kube-state-metrics
        containers:
        - name: kube-state-metrics
          image: gcr.io/google_containers/kube-state-metrics:v1.0.1
          ports:
          - name: http-metrics
            containerPort: 8080
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 5
            timeoutSeconds: 5
          resources:
            requests:
              memory: 100Mi
              cpu: 100m
            limits:
              memory: 200Mi
              cpu: 200m
        - name: addon-resizer
          image: gcr.io/google_containers/addon-resizer:1.0
          resources:
            limits:
              cpu: 100m
              memory: 30Mi
            requests:
              cpu: 100m
              memory: 30Mi
          env:
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          command:
            - /pod_nanny
            - --container=kube-state-metrics
            - --cpu=100m
            - --extra-cpu=1m
            - --memory=100Mi
            - --extra-memory=2Mi
            - --threshold=5
            - --deployment=kube-state-metrics
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: RoleBinding
  metadata:
    name: kube-state-metrics
    namespace: ${NAMESPACE}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: kube-state-metrics-resizer
  subjects:
  - kind: ServiceAccount
    name: kube-state-metrics
    namespace: ${NAMESPACE}
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: Role
  metadata:
    namespace: ${NAMESPACE}
    name: kube-state-metrics-resizer
  rules:
  - apiGroups: [""]
    resources:
    - pods
    verbs: ["get"]
  - apiGroups: ["extensions"]
    resources:
    - deployments
    resourceNames: ["kube-state-metrics"]
    verbs: ["get", "update"] 
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: kube-state-metrics
    namespace: ${NAMESPACE}
- apiVersion: v1
  kind: Service
  metadata:
    name: kube-state-metrics
    namespace: ${NAMESPACE}
    labels:
      k8s-app: kube-state-metrics
    annotations:
      prometheus.io/scrape: 'true'
  spec:
    ports:
    - name: http-metrics
      port: 8080
      targetPort: http-metrics
      protocol: TCP
    selector:
      k8s-app: kube-state-metrics                             